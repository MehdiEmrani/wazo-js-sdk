import { AuthD } from './api/auth';
import { ApplicationD } from './api/application';
import { ConfD } from './api/confd';
import { CtidNg } from './api/ctid-ng';
import { DirD } from './api/dird';
import { CallLogD } from './api/call-logd';
import { ChatD } from './api/chatd';
import { CallD } from './api/calld';
import { AgentD } from './api/agentd';
import { WebhookD } from './api/webhookd';
import { AmiD } from './api/amid';
import ApiRequester from './utils/api-requester';
type ConstructorParams = {
    server: string;
    agent?: Record<string, any> | null | undefined;
    clientId?: string;
    refreshToken?: string | null | undefined;
    isMobile?: boolean | null | undefined;
    fetchOptions?: Record<string, any>;
};
export default class ApiClient {
    client: ApiRequester;
    auth: AuthD;
    application: ApplicationD;
    confd: ConfD;
    ctidNg: CtidNg;
    dird: DirD;
    callLogd: CallLogD;
    chatd: ChatD;
    calld: CallD;
    agentd: AgentD;
    webhookd: WebhookD;
    amid: AmiD;
    refreshToken: string | null | undefined;
    onRefreshToken: ((...args: Array<any>) => any) | null | undefined;
    onRefreshTokenError: ((...args: Array<any>) => any) | null | undefined;
    refreshExpiration: number | null | undefined;
    refreshBackend: string | null | undefined;
    refreshTenantId: string | null | undefined;
    refreshDomainName: string | null | undefined;
    isMobile: boolean;
    fetchOptions: Record<string, any>;
    constructor({ server, agent, refreshToken, clientId, isMobile, fetchOptions, }: ConstructorParams);
    initializeEndpoints(): void;
    updateParameters({ server, agent, clientId, fetchOptions, }: Record<string, any>): void;
    forceRefreshToken(): Promise<string | null | undefined>;
    refreshTokenCallback(): Promise<string | null | undefined>;
    setToken(token: string): void;
    setTenant(tenant: string): void;
    setRefreshToken(refreshToken: string | null | undefined): void;
    setClientId(clientId: string | null | undefined): void;
    setOnRefreshToken(onRefreshToken: (...args: Array<any>) => any): void;
    setOnRefreshTokenError(callback: (...args: Array<any>) => any): void;
    setRefreshExpiration(refreshExpiration: number): void;
    setRefreshBackend(refreshBackend: string): void;
    setRefreshTenantId(tenantId: string | null | undefined): void;
    setRefreshDomainName(domainName: string | null | undefined): void;
    setIsMobile(isMobile: boolean): void;
    setFetchOptions(fetchOptions: Record<string, any>): void;
    disableErrorLogging(): void;
}
export {};
//# sourceMappingURL=api-client.d.ts.map