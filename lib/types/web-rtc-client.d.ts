import 'webrtc-adapter';
import type { SessionDialog } from 'sip.js/lib/core/dialogs/session-dialog';
import { UserAgentState } from 'sip.js/lib/api/user-agent-state';
import { URI } from 'sip.js/lib/grammar/uri';
import { UserAgent } from 'sip.js/lib/api/user-agent';
import { OutgoingByeRequest, OutgoingInviteRequest, OutgoingRequest } from 'sip.js/lib/core';
import { Inviter, Invitation, Registerer } from 'sip.js/lib/api';
import Emitter from './utils/Emitter';
import Heartbeat from './utils/Heartbeat';
export declare const replaceLocalIpModifier: (description: Record<string, any>) => Promise<any>;
export declare const events: string[];
export declare const transportEvents: string[];
export declare class CanceledCallError extends Error {
}
type MediaConfig = {
    audio: Record<string, any> | boolean;
    video?: Record<string, any> | boolean;
    localVideo?: Record<string, any> | boolean;
};
type WebRtcConfig = {
    displayName?: string;
    host: string;
    port?: number;
    websocketSip?: string;
    authorizationUser?: string;
    password?: string;
    uri?: string;
    media?: MediaConfig;
    iceCheckingTimeout?: number;
    log?: Record<string, any>;
    audioOutputDeviceId?: string;
    audioOutputVolume?: number;
    userAgentString?: string;
    heartbeatDelay?: number;
    heartbeatTimeout?: number;
    maxHeartbeats?: number;
    skipRegister?: boolean;
};
export default class WebRTCClient extends Emitter {
    config: WebRtcConfig;
    inviteMessageIp: string;
    uaConfigOverrides: Record<string, any> | null | undefined;
    userAgent: UserAgent | null;
    registerer: Registerer | null;
    hasAudio: boolean;
    audio: MediaTrackConstraints | boolean | undefined;
    audioElements: Record<string, HTMLAudioElement>;
    video: MediaTrackConstraints | boolean | undefined;
    audioStreams: Record<string, any>;
    audioOutputDeviceId: string | null | undefined;
    audioOutputVolume: number;
    heldSessions: Record<string, any>;
    connectionPromise: Promise<void> | null | undefined;
    _boundOnHeartbeat: (...args: Array<any>) => any;
    heartbeat: Heartbeat;
    heartbeatTimeoutCb: ((...args: Array<any>) => any) | null | undefined;
    heartbeatCb: ((...args: Array<any>) => any) | null | undefined;
    statsIntervals: Record<string, any>;
    sipSessions: Record<string, Invitation | Inviter>;
    conferences: Record<string, boolean>;
    skipRegister: boolean;
    networkMonitoringInterval: Record<string, any>;
    sessionNetworkStats: Record<string, Record<string, any>>;
    forceClosed: boolean;
    ON_USER_AGENT: string;
    REGISTERED: string;
    UNREGISTERED: string;
    REGISTRATION_FAILED: string;
    INVITE: string;
    CONNECTED: string;
    DISCONNECTED: string;
    TRANSPORT_ERROR: string;
    MESSAGE: string;
    ACCEPTED: string;
    REJECTED: string;
    ON_TRACK: string;
    ON_REINVITE: string;
    ON_ERROR: string;
    ON_SCREEN_SHARING_REINVITE: string;
    ON_NETWORK_STATS: string;
    ON_EARLY_MEDIA: string;
    ON_DISCONNECTED: string;
    static isAPrivateIp(ip: string): boolean;
    static getIceServers(ip: string): Array<{
        urls: Array<string>;
    }>;
    constructor(config: WebRtcConfig, session: Invitation | Inviter | null | undefined, uaConfigOverrides?: Record<string, any> | null | undefined);
    configureMedia(media: MediaConfig): void;
    setMediaConstraints(media: MediaStreamConstraints): void;
    createUserAgent(configOverrides: Record<string, any> | null | undefined): UserAgent;
    isConnected(): boolean;
    isConnecting(): boolean;
    isRegistered(): boolean;
    onConnect(): Promise<void>;
    onDisconnect(error?: Error): Promise<void>;
    register(tries?: number): Promise<void>;
    _monkeyPatchRegisterer(registerer: Registerer | null | undefined): void;
    unregister(): Promise<void>;
    stop(): Promise<void>;
    call(number: string, enableVideo?: boolean, audioOnly?: boolean, conference?: boolean): Inviter | Invitation;
    answer(session: Invitation, enableVideo?: boolean): Promise<void>;
    hangup(session: Invitation | Inviter): Promise<OutgoingByeRequest | null>;
    getStats(session: Invitation | Inviter): Promise<RTCStatsReport | null>;
    startNetworkMonitoring(session: Inviter | Invitation, interval?: number): void;
    stopNetworkMonitoring(session: Inviter | Invitation): void;
    reject(session: Invitation | Inviter): Promise<void>;
    close(force?: boolean): Promise<void>;
    getNumber(session: Inviter): string | null | undefined;
    mute(session: Inviter | Invitation): void;
    unmute(session: Inviter | Invitation): void;
    isAudioMuted(session: Inviter | Invitation): boolean;
    toggleCameraOn(session: Inviter | Invitation): void;
    toggleCameraOff(session: Inviter | Invitation): void;
    hold(session: Inviter | Invitation, isConference?: boolean, hadVideo?: boolean): Promise<OutgoingInviteRequest | void>;
    unhold(session: Inviter | Invitation, isConference?: boolean): Promise<OutgoingInviteRequest | void>;
    upgradeToVideo(session: Inviter | Invitation, constraints: Record<string, any>, isConference: boolean): Promise<MediaStream | undefined>;
    downgradeToAudio(session: Invitation | Inviter): void;
    getStreamFromConstraints(constraints: Record<string, any>, conference?: boolean): Promise<MediaStream | null | undefined>;
    getHeldSession(sessionId: string): any;
    isCallHeld(session: Inviter | Invitation): boolean;
    isVideoRemotelyHeld(sessionId: string): boolean;
    sendDTMF(session: Inviter | Invitation, tone: string): boolean;
    message(destination: string, message: string): void;
    transfer(session: Inviter | Invitation, target: string): void;
    atxfer(session: Inviter | Invitation): Record<string, any>;
    sendMessage(sipSession: Inviter | Invitation | null | undefined, body: string, contentType?: string): void;
    pingServer(): OutgoingRequest | void;
    getState(): UserAgentState;
    getContactIdentifier(): string | null;
    isFirefox(): boolean;
    changeAudioOutputVolume(volume: number): void;
    changeAudioOutputDevice(id: string): void;
    changeAudioInputDevice(id: string, session: Inviter | Invitation | null | undefined, force: boolean | null | undefined): Promise<MediaStream | null>;
    changeVideoInputDevice(id: string, session?: Inviter | Invitation): Promise<MediaStream | void>;
    setVideoInputDevice(id: string): null | undefined;
    changeSessionVideoInputDevice(id: string | null | undefined, session: Inviter | Invitation): Promise<MediaStream | void>;
    getAudioDeviceId(): string | null | undefined;
    getVideoDeviceId(): string | null;
    reinvite(sipSession: Inviter | Invitation, newConstraints?: Record<string, any> | null | undefined, conference?: boolean, audioOnly?: boolean, iceRestart?: boolean): Promise<OutgoingInviteRequest | void>;
    getUserMedia(constraints: Record<string, any>): Promise<MediaStream>;
    catchIpfromMessageBody(body: string): void;
    getPeerConnection(sessionId: string): any;
    getLocalStream(sessionId: string): MediaStream | null;
    getLocalTracks(sessionId: string): MediaStreamTrack[];
    hasLocalVideo(sessionId: string): boolean;
    hasALocalVideoTrack(sessionId: string): boolean;
    getLocalVideoStream(sessionId: string): MediaStream | null | undefined;
    getRemoteStream(sessionId: string): MediaStream | null;
    getRemoteTracks(sessionId: string): MediaStreamTrack[];
    hasRemoteVideo(sessionId: string): boolean;
    hasARemoteVideoTrack(sessionId: string): boolean;
    getRemoteVideoStream(sessionId: string): MediaStream | null | undefined;
    getRemoteVideoStreamFromPc(sessionId: string): MediaStream | null | undefined;
    hasVideo(sessionId: string): boolean;
    hasAVideoTrack(sessionId: string): boolean;
    getSipSessionId(sipSession: Inviter | Invitation | null | undefined): string;
    waitForRegister(): Promise<void>;
    sessionWantsToDoVideo(session: Inviter | Invitation): boolean;
    hasHeartbeat(): boolean;
    startHeartbeat(): void;
    stopHeartbeat(): void;
    setOnHeartbeatTimeout(cb: (...args: Array<any>) => any): void;
    setOnHeartbeatCallback(cb: (...args: Array<any>) => any): void;
    onCallEnded(session: Inviter | Invitation): void;
    attemptReconnection(): void;
    storeSipSession(session: Invitation | Inviter): void;
    getSipSession(id: string): Invitation | Inviter | null | undefined;
    getSipSessionIds(): string[];
    setLocalMediaStream(sipSessionId: string, newStream: MediaStream): void;
    updateLocalStream(sipSessionId: string, newStream: MediaStream): void;
    updateRemoteStream(sessionId: string): void;
    getMediaConfiguration(enableVideo: boolean, conference?: boolean, constraints?: Record<string, any> | null | undefined): Record<string, any>;
    isConference(sessionId: string): boolean;
    createAudioElementFor(sessionId: string): HTMLAudioElement;
    _onTransportError(): void;
    _onHeartbeat(message: string | Record<string, any>): void;
    _onHeartbeatTimeout(): Promise<void>;
    _isWeb(): boolean;
    _isVideoTrack(track: MediaStreamTrack): boolean;
    _hasAudio(): boolean;
    _getAudioConstraints(): MediaTrackConstraints | boolean;
    _getVideoConstraints(video?: boolean): MediaTrackConstraints | boolean;
    _connectIfNeeded(): Promise<any>;
    _buildConfig(config: WebRtcConfig, session: Invitation | Inviter | null | undefined): Promise<WebRtcConfig>;
    _createWebRTCConfiguration(configOverrides?: Record<string, any> | null): Record<string, any>;
    _getRtcOptions(): {
        mandatory: {
            OfferToReceiveAudio: boolean;
            OfferToReceiveVideo: boolean;
        };
    };
    _setupSession(session: Inviter | Invitation): void;
    _onEarlyProgress(session: any): void;
    _onAccepted(session: Inviter | Invitation, sessionDialog?: SessionDialog, withEvent?: boolean): void;
    _isAudioOnly(session: Inviter | Invitation): boolean;
    _setupMedias(session: Inviter | Invitation, newStream?: MediaStream | null | undefined): void;
    _cleanupMedia(session?: Inviter | Invitation): void;
    _cleanupStream(stream: MediaStream): void;
    _toggleAudio(session: Inviter | Invitation, muteAudio: boolean): void;
    _toggleVideo(session: Inviter | Invitation, muteCamera: boolean): void;
    /**
     * @param pc RTCPeerConnection
     */
    _getRemoteStream(pc: any): MediaStream | null;
    _cleanupRegister(): void;
    _startSendingStats(session: Inviter | Invitation): void;
    _stopSendingStats(session: Invitation | Inviter): void;
    _makeURI(target: string): URI | undefined;
    _disconnectTransport(force?: boolean): Promise<void>;
    _fetchNetworkStats(sessionId: string): Promise<Record<string, any> | null | undefined>;
}
export {};
//# sourceMappingURL=web-rtc-client.d.ts.map